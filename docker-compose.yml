version: "3"

services:
  ms-tracking-manager:
    image: ms-tracking-manager
    container_name: ms-tracking-manager
    build:
      context: ./ms.tracking-manager
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    networks:
      - smartnetwork

  ms-carriers:
    image: ms-carriers
    container_name: ms-carriers
    build:
      context: ./ms.carriers
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    networks:
      - smartnetwork

  web-tracking-view:
    image: web-tracking-view
    container_name: web-tracking-view
    build:
      context: ./web.tracking-view
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    networks:
      - smartnetwork
    depends_on:
      - ms-tracking-manager

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:6.0.0
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - smartnetwork

  kafka:
    image: confluentinc/cp-kafka:6.0.0
    restart: on-failure
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    networks:
      - smartnetwork

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: "PostgresSmartEnvios!"
    ports:
      - "5432:5432"
    networks:
      - smartnetwork

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@smartenvios.com"
      PGADMIN_DEFAULT_PASSWORD: "PgadminSmartEnvios!"
    ports:
      - "16543:80"
    depends_on:
      - postgres
    networks:
      - smartnetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - smartnetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - smartnetwork

  apm:
    image: docker.elastic.co/apm/apm-server-oss:7.13.0
    container_name: apm
    volumes:
      - ./apm/apm-server.yml:/usr/share/apm-server/apm-server.yml
    ports:
      - "8200:8200"
    restart: on-failure
    networks:
      - smartnetwork

networks:
  smartnetwork:
    driver: bridge
